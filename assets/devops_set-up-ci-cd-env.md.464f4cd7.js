import{_ as s,c as n,o as a,N as l}from"./chunks/framework.0799945b.js";const o="/assets/jenkins_01.b2c1c826.png",p="/assets/jenkins_02.90b0ce77.png",e="/assets/jenkins_03.643ef2c5.png",t="/assets/jenkins_04.78b6bcd6.png",c="/assets/jenkins_05.2821d444.png",r="/assets/jenkins_06.a64cfb23.jpg",i="/assets/gitlab_01.0c6b3259.jpg",C="/assets/gitlab_02.8cc3a7cf.png",y="/assets/jenkins_07.d2540d13.png",D="/assets/jenkins_08.3ad25f61.png",A="/assets/jenkins_09.c7ddc879.png",d="/assets/jenkins_10.cfe46bab.png",g="/assets/jenkins_11.7bc5d9b9.png",u="/assets/gitlab_05.8394f323.png",h="/assets/gitlab_03.2e4962e8.png",F="/assets/gitlab_04.7dccfc5e.png",m="/assets/gitlab_06.c4b4bf36.jpg",k="/assets/jenkins_13.cf9d2276.jpg",E="/assets/jenkins_14.3c6c9a61.png",b="/assets/jenkins_15.511a6606.png",v="/assets/jenkins_12.471aa1a9.png",P=JSON.parse('{"title":"用 Docker-Nginx-Jenkins-Gitlab 搭建 CI/CD 环境","description":"","frontmatter":{"title":"用 Docker-Nginx-Jenkins-Gitlab 搭建 CI/CD 环境"},"headers":[],"relativePath":"devops/set-up-ci-cd-env.md"}'),_={name:"devops/set-up-ci-cd-env.md"},B=l(`<h1 id="用-docker-nginx-jenkins-gitlab-搭建-ci-cd-环境" tabindex="-1">用 Docker-Nginx-Jenkins-GitLab 搭建 CI/CD 环境 <a class="header-anchor" href="#用-docker-nginx-jenkins-gitlab-搭建-ci-cd-环境" aria-label="Permalink to &quot;用 Docker-Nginx-Jenkins-GitLab 搭建 CI/CD 环境&quot;">​</a></h1><ul><li>Docker 提供容器环境</li><li>docker-compose 定义和运行由多个容器组成的应用</li><li>Jenkins 持续集成交付</li><li>GitLab 代码仓库</li><li>Harbor 私有镜像仓库</li><li>Verdaccio 私有 npm 仓库</li></ul><h2 id="在-ubuntu-上安装-docker-engine" tabindex="-1">在 Ubuntu 上安装 Docker Engine <a class="header-anchor" href="#在-ubuntu-上安装-docker-engine" aria-label="Permalink to &quot;在 Ubuntu 上安装 Docker Engine&quot;">​</a></h2><h3 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h3><ul><li><p>系统要求</p><ul><li>Ubuntu Kinetic 22.10</li><li>Ubuntu Jammy 22.04 (LTS)</li><li>Ubuntu Focal 20.04 (LTS)</li><li>Ubuntu Bionic 18.04 (LTS)</li></ul></li><li><p>卸载旧版本</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-engine</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.io</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">containerd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">runc</span></span></code></pre></div></li></ul><h3 id="安装方法" tabindex="-1">安装方法 <a class="header-anchor" href="#安装方法" aria-label="Permalink to &quot;安装方法&quot;">​</a></h3><ul><li><p>使用 APT 安装</p><ul><li><p>apt 升级，并添加相关软件包</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">apt-transport-https</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">ca-certificates</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">curl</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">gnupg</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">lsb-release</span></span></code></pre></div></li><li><p>为了确认所下载软件包的合法性，需要添加软件源的 <code>GPG</code> 密钥（鉴于国内网络问题，改用国内源）</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 权限不够时先执行这个，够则不执行</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0755</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/apt/keyrings</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-fsSL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gpg</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--dearmor</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/apt/keyrings/docker.gpg</span></span></code></pre></div></li><li><p>向 <code>sources.list</code> 中添加 Docker 软件源</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">deb [arch=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">dpkg</span><span style="color:#C3E88D;"> --print-architecture</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">lsb_release</span><span style="color:#C3E88D;"> -cs</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> stable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tee</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/apt/sources.list.d/docker.list</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/null</span></span></code></pre></div></li><li><p>更新 apt 软件包缓存，并安装 <code>docker-ce</code></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div><p>默认的 umask 可能配置错误，导致无法检测到存储库公钥文件。在更新包索引之前，尝试授予 Docker 公钥文件的读权限：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a+r</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/apt/keyrings/docker.gpg</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div><p>安装 <code>docker-ce</code></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt-get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-ce</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-ce-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">containerd.io</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-buildx-plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-compose-plugin</span></span></code></pre></div></li></ul></li><li><p>使用脚本安装（未实操）</p><blockquote><p><code>--mirror</code> 选项，指定源进行安装</p><p><code>--dry-run</code> 选项，了解脚本在被调用时将运行哪些步骤</p></blockquote><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-fsSL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get.docker.com</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get-docker.sh</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get-docker.sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--dry-run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mirror</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Aliyun</span></span></code></pre></div></li></ul><h3 id="启动-docker" tabindex="-1">启动 Docker <a class="header-anchor" href="#启动-docker" aria-label="Permalink to &quot;启动 Docker&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">enable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span></code></pre></div><h3 id="建立-docker-用户组" tabindex="-1">建立 Docker 用户组 <a class="header-anchor" href="#建立-docker-用户组" aria-label="Permalink to &quot;建立 Docker 用户组&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 建立 docker 组</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">groupadd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将当前用户加入 docker 组</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">usermod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-aG</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> $USER</span></span></code></pre></div><p>退出当前终端并重新登录，进行如下测试。</p><h3 id="测试-docker-安装是否正确" tabindex="-1">测试 Docker 安装是否正确 <a class="header-anchor" href="#测试-docker-安装是否正确" aria-label="Permalink to &quot;测试 Docker 安装是否正确&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello-world</span></span></code></pre></div><h3 id="配置镜像加速" tabindex="-1">配置镜像加速 <a class="header-anchor" href="#配置镜像加速" aria-label="Permalink to &quot;配置镜像加速&quot;">​</a></h3><p>由于镜像服务可能出现宕机，所以建议配置多个镜像。<code>/etc/docker/daemon.json</code> （如果没有就新建）中写入如下内容：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C3E88D;">registry-mirrors</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">https://dockerhub.azk8s.cn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">https://reg-mirror.qiniu.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">https://hub-mirror.c.163.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">https://mirror.baidubce.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>之后重新启动服务：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daemon-reload</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span></code></pre></div><h2 id="安装-nginx-jenkins-gitlab-镜像" tabindex="-1">安装 Nginx，Jenkins，GitLab 镜像 <a class="header-anchor" href="#安装-nginx-jenkins-gitlab-镜像" aria-label="Permalink to &quot;安装 Nginx，Jenkins，GitLab 镜像&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jenkins/jenkins:lts</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab/gitlab-ce</span></span></code></pre></div><p>为了配合 compose，以及方便管理以上三个镜像的文件，统一把他们建立在 <code>$HOME</code> 的文件夹下，<code>$HOME</code> 就是与你用户名同名的那个文件夹 <code>/home/user</code>，<code>user</code> 为你的用户名。（这里暂且先在 <code>$HOME</code> 下，后面会再尝试放在公共目录下，到时再更新）</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker/{jenkins/jenkins_home,nginx,gitlab,compose,webserver}</span></span></code></pre></div><p>以上命令，通过 <code>mkdir</code> ， 建立目录如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">home</span></span>
<span class="line"><span style="color:#A6ACCD;">  user</span></span>
<span class="line"><span style="color:#A6ACCD;">  + docker</span></span>
<span class="line"><span style="color:#A6ACCD;">    + jenkins</span></span>
<span class="line"><span style="color:#A6ACCD;">      + jenkins_home</span></span>
<span class="line"><span style="color:#A6ACCD;">    + nginx</span></span>
<span class="line"><span style="color:#A6ACCD;">    + gitlab     // gitlab 文件存放</span></span>
<span class="line"><span style="color:#A6ACCD;">    + compose    // 管理docker-compose.yml 后续会提到</span></span>
<span class="line"><span style="color:#A6ACCD;">    + webserver  // 用于项目发布的地方</span></span></code></pre></div><p><code>compose</code> 文件夹下新建 <code>docker-compose.yml</code> ，内容如下：</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 集合</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">docker_jenkins</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">user</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 为了避免一些权限问题 在这使用了root</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 重启方式</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jenkins/jenkins:lts</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jenkins</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 容器名称</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 对外暴露的端口定义    外部端口:内部端口</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">8081:8080</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">50000:50000</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 卷挂载路径   系统本地目录:容器内目录</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$HOME/docker/jenkins/jenkins_home/:/var/jenkins_home</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/bin/docker:/usr/bin/docker</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">docker_nginx</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 有几组端口号（433不算），就可以部署几组静态页面，也就是编译好的前端项目，这样就可以实现部署多个项目</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">80:80</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">81:81</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">82:82</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">433:433</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$HOME/docker/nginx/conf:/etc/nginx</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$HOME/docker/nginx/logs:/var/log/nginx</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$HOME/docker/webserver:/usr/share/nginx/html</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">docker_gitlab</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab/gitlab-ce</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">10443:443</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">1080:80</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1022:22</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$HOME/docker/gitlab/config:/etc/gitlab</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$HOME/docker/gitlab/logs:/var/log/gitlab</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$HOME/docker/gitlab/data:/var/opt/gitlab</span></span></code></pre></div><h2 id="配置-nginx" tabindex="-1">配置 Nginx <a class="header-anchor" href="#配置-nginx" aria-label="Permalink to &quot;配置 Nginx&quot;">​</a></h2><p>Nginx 这里有一个坑，如果是全新的环境，没有 Nginx 相关配置的话，直接使用 <code>docker compose up -d</code> 启动容器（即用上面的配置挂载卷启动 Nginx），Nginx 会一直重启，导致我们无法正常访问部署的页面。那么怎么解决呢？</p><p>要给 Nginx 挂载卷，要先有一个配置文件才能挂载，具体做法就是先以不挂载卷的形式正常启动一个 Nginx 容器，然后从中 <code>cp</code> 拷贝一份配置文件，删除这个容器，再重新以挂载卷的形式启动一个新容器。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 以不挂载卷的形式正常启动一个 Nginx 容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">80</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">80</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx-test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 从容器拷贝配置文件到本地目录</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx-test:/etc/nginx</span><span style="color:#A6ACCD;"> $HOME</span><span style="color:#C3E88D;">/docker/nginx/conf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 停止 nginx-test 容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx-test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 删除 nginx-test 容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nginx-test</span></span></code></pre></div><p>到 <code>$HOME/docker/nginx/conf</code> 目录下 <code>ls</code>，会发现如下目录与文件：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">conf.d</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">fastcgi_params</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">mime.types</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">modules</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">nginx.conf</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">scgi_params</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">uwsgi_params</span></span></code></pre></div><p><code>nginx.conf</code> 中存放着 Nginx 总体的配置，它引用了 <code>mime.types</code> 和 <code>conf.d/*.conf</code> ，而 <code>conf.d</code> 中只有一个默认的 server 配置文件 <code>default.conf</code> 。我们可以在 <code>nginx.conf</code> 中直接修改或添加配置，也可以在 <code>conf.d</code> 目录下创建新的 server 配置，如 <code>vue3-vite-ts.conf</code> ，<code>web2.conf</code> ：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># vue3-vite-ts.conf</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">server {</span></span>
<span class="line"><span style="color:#A6ACCD;">  listen       81;</span></span>
<span class="line"><span style="color:#A6ACCD;">  listen  [::]:81;</span></span>
<span class="line"><span style="color:#A6ACCD;">  server_name  localhost;</span></span>
<span class="line"><span style="color:#A6ACCD;">  location / {</span></span>
<span class="line"><span style="color:#A6ACCD;">     root   /usr/share/nginx/html/vue3-vite-ts;</span></span>
<span class="line"><span style="color:#A6ACCD;">     index  index.html index.htm;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># web2.conf</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">server {</span></span>
<span class="line"><span style="color:#A6ACCD;">  listen       82;</span></span>
<span class="line"><span style="color:#A6ACCD;">  listen  [::]:82;</span></span>
<span class="line"><span style="color:#A6ACCD;">  server_name  localhost;</span></span>
<span class="line"><span style="color:#A6ACCD;">  location / {</span></span>
<span class="line"><span style="color:#A6ACCD;">    root   /usr/share/nginx/html/web2;</span></span>
<span class="line"><span style="color:#A6ACCD;">    index  index.html index.htm;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>此处 listen 监听的端口只是内部端口，即 <code>docker-compose.yml</code> 文件中 <code>ports</code> 下 <code>- 81:81</code> 中，冒号后边的那个，冒号前边的才是给浏览器访问用的。</p><p>至此，Nginx 就配置好了，下面启动服务：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 后台启动所有容器（-d 是后台启动）</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 停止所有容器</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># docker compose stop</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 停止所有容器</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># docker compose restart</span></span></code></pre></div><p>然后就可以用 <code>ip:80</code> 访问到 Nginx 自带的欢迎页， <code>ip:81</code> 、 <code>ip:82</code> 访问我们自己的项目，在 <code>$HOME/docker/webserver</code> 目录下创建 <code>web2/index.html</code> ，随便写点东西就可以去浏览器用 <code>ip:82</code> 查看了（ip 用你自己的主机 ip 替换），至于 <code>vue3-vite-ts</code> ，我们留着后边用工作流发过来。</p><h2 id="配置-jenkins" tabindex="-1">配置 Jenkins <a class="header-anchor" href="#配置-jenkins" aria-label="Permalink to &quot;配置 Jenkins&quot;">​</a></h2><ul><li><p>解锁 Jenkins</p><p>服务启动之后，就可以用 <strong>主机 ip + 上边配置的端口</strong> 来访问 Jenkins 的页面了，如 <code>http://192.168.119.118:8081/</code>，会出现如下的页面：</p><img src="`+o+'"><p>去 <code>$HOME/docker/jenkins/jenkins_home/secrets/initialAdminPassword</code> 中找密码，粘过来即可。</p><p>过程中可能 <code>secrets</code> 文件夹没有权限打开，执行 <code>sudo su</code> 切换到 root 用户，即可打开。</p></li><li><p>安装插件</p><p>安装推荐安装的插件。</p></li><li><p>创建第一个管理员用户</p><p>填写用户信息，然后点击 <strong>保存并完成</strong>。</p></li><li><p>配置 Jenkins URL</p><p>保持默认即可，直接点击 <strong>保存并完成</strong>。</p></li><li><p>Jenkins 已就绪</p><p><strong>开始使用Jenkins</strong>，然后就进入你前边创建的管理员用户登录的页面了。</p></li><li><p>管理插件</p><p>点击 <strong>Manage Jenkins</strong> ---&gt; <strong>Manage Plugins</strong></p><img src="'+p+'"><p>点击 <strong>Avaliable plugins</strong>，搜索勾选 <strong>NodeJS</strong> 、<strong>Publish Over SSH</strong> 、<strong>GitLab</strong> 插件，点击 <strong>Install without restart</strong> 直接安装</p><img src="'+e+'"><p>安装完成后，回到 <strong>Manage Jenkins</strong> ，<strong>Manage Jenkins</strong> ---&gt; <strong>Global Tool Configuration</strong> ，配置 nodejs</p><img src="'+t+'"><p>找到 <strong>NodeJS</strong> ，<strong>新增 NodeJS</strong> ，选择最新的 LTS 版本，保存</p><img src="'+c+'"><p>回到 <strong>Manage Jenkins</strong> ，<strong>Manage Jenkins</strong> ---&gt; <strong>Configure System</strong> ，在最下边找到 Publish Over SSH 并配置</p><img src="'+r+'"></li></ul><h2 id="配置-gitlab" tabindex="-1">配置 GitLab <a class="header-anchor" href="#配置-gitlab" aria-label="Permalink to &quot;配置 GitLab&quot;">​</a></h2><ul><li><p>进入 GitLab</p><p>服务启动之后，就可以用 <strong>主机 ip + 端口号</strong> 来访问 GitLab 的页面了，如 <code>http://192.168.119.118:1080/</code>。</p></li><li><p>使用 root 密码登录</p><p>进入页面后，如果没有重置密码的界面，而直接是登录界面，那就需要去 <code>$HOME/docker/gitlab/config/initial_root_password</code> 找到密码，用户名是 root ，然后登录即可。</p></li></ul><h2 id="jenkins-和-gitlab-关联" tabindex="-1">Jenkins 和 GitLab 关联 <a class="header-anchor" href="#jenkins-和-gitlab-关联" aria-label="Permalink to &quot;Jenkins 和 GitLab 关联&quot;">​</a></h2><h3 id="gitlab-中创建个人访问令牌" tabindex="-1">GitLab 中创建个人访问令牌 <a class="header-anchor" href="#gitlab-中创建个人访问令牌" aria-label="Permalink to &quot;GitLab 中创建个人访问令牌&quot;">​</a></h3><img src="'+i+'"><p>创建好之后会出现这个</p><img src="'+C+'"><p>点击右侧小眼睛可以查看，<strong>将内容复制出来保存好，后边会用</strong>。</p><h3 id="jenkins-中配置任务" tabindex="-1">Jenkins 中配置任务 <a class="header-anchor" href="#jenkins-中配置任务" aria-label="Permalink to &quot;Jenkins 中配置任务&quot;">​</a></h3><p>在 Jenkins 中 <strong>新建任务</strong>，然后进行以下配置。</p><ul><li><p>配置 <em>源码管理</em>，填写对应的源码库与分支</p><img src="'+y+'"><p>Credentials 一项点击 <strong>添加</strong>，类型选择 Username with password ，用户名填之前在 GitLab 中创建的 jenkins 用户，密码填对应的密码（这里笔者也用过 SSH Username with private key，但一直没有成功）。</p><img src="'+D+'"></li><li><p>配置 <em>构建触发器</em></p><img src="'+A+'"></li><li><p>配置 <em>构建环境</em></p><img src="'+d+`"></li><li><p>配置 <em>Build Steps</em></p><p><strong>增加构建步骤</strong> ---&gt; <strong>执行 shell</strong> ，输入需要执行的命令：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--registry=https://registry.npmmirror.com</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--frozen-lockfile</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist.tar</span></span>
<span class="line"><span style="color:#FFCB6B;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-zcvf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist.tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./dist</span></span></code></pre></div><p><code>--frozen-lockfile</code> 这个参数在服务器 <code>install</code> 不会生成 <code>pnpm-lock.yaml</code>，防止服务器和本地代码冲突</p><p><strong>增加构建步骤</strong> ---&gt; <strong>Send files or execute commands over SSH</strong> 。</p><img src="`+g+`"><p>Exec command 中的命令为：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/pxk/docker/webserver/vue3-vite-ts</span></span>
<span class="line"><span style="color:#FFCB6B;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zxvf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist.tar</span></span>
<span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist/</span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist.tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dist</span></span></code></pre></div></li></ul><h3 id="gitlab-中配置-webhooks" tabindex="-1">GitLab 中配置 Webhooks <a class="header-anchor" href="#gitlab-中配置-webhooks" aria-label="Permalink to &quot;GitLab 中配置 Webhooks&quot;">​</a></h3><p>在项目的设置中找到 Webhooks ，URL 填写 [配置 <em>构建触发器</em>](#配置 <em>构建触发器</em>) 这里的 GitLab Webhook URL ，Secret 令牌 填写 [GitLab 中创建个人访问令牌](#GitLab 中创建个人访问令牌) 这里保存下的令牌，勾选推送事件，然后最下边 <strong>添加webhook</strong> 。</p><img src="`+u+'"><p>如果遇到下面的问题：</p><img src="'+h+'"><p>需要到 <strong>管理员</strong> ---&gt; <strong>网络</strong> ---&gt; <strong>出站请求</strong> 这里，勾选上“允许来自 web hooks 和服务对本地网络的请求”，然后 <strong>保存更改</strong>。</p><img src="'+F+'"><p>这样再回去 <strong>添加Webhook</strong> 就能成功了。</p><p>添加成功之后，在页面最下边会生成一个 Project Hooks ，点击 <strong>测试</strong> ---&gt; <strong>推送事件</strong> 测试一下，这时可能会报一个这样的错误：</p><img src="'+m+'"><p>这需要 Jenkins 中改一些安全设置。</p><p>Jenkins ---&gt; 系统管理 ---&gt; 全局安全配置 ---&gt; 授权策略 ---&gt; 匿名用户具有可读权限，确保这个选项 <strong>勾选</strong> 。</p><img src="'+k+'"><p>Jenkins ---&gt; 系统管理 ---&gt; 系统配置 ---&gt; Gitlab ---&gt; Enable authentication for &#39;/project&#39; end-point ，确保这个选项 <strong>没选</strong> 。</p><img src="'+E+'"><h2 id="jenkins-中构建项目" tabindex="-1">Jenkins 中构建项目 <a class="header-anchor" href="#jenkins-中构建项目" aria-label="Permalink to &quot;Jenkins 中构建项目&quot;">​</a></h2><p>在主页找到要构建的任务名称，点开后边下拉框，点击 <strong>立即构建</strong> ：</p><img src="'+b+'"><p>如果最后发送文件时出现这样的错误（从任务点进去会发现有<strong>构建历史</strong>，每条历史都可以展开下拉框查看<strong>控制台输出</strong>）：</p><img src="'+v+`"><p>是因为文件发送到的目录的所有者与执行发送命令的用户不是同一个，或者是后者的权限不够，这就需要修改目录所有权。</p><p>更改文件或目录所有权的方法：</p><ul><li><p>当只需要修改所有者时，<code>chown [-R] 所有者 文件或目录</code> ；</p></li><li><p>当需要同时更改所有者和所属组，<code>chown [-R] 所有者:所属组 文件或目录</code> 。</p></li></ul><p>-R（注意大写）选项表示连同子目录中的所有文件，都更改所有者。</p><p>所以执行以下命令即可（user 与 group 用你自己合适的替换）。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chown</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-R</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user:group</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue3-vite-ts</span></span></code></pre></div><p>修改后即可发送成功。</p><p>最后出现下面这些就是部署成功了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Build step &#39;Send files or execute commands over SSH&#39; changed build result to SUCCESS</span></span>
<span class="line"><span style="color:#A6ACCD;">Finished: SUCCESS</span></span></code></pre></div><p>恭喜！可以去浏览器 <code>ip:81</code> （ip 用你自己的主机 ip）查看了。</p>`,84),f=[B];function x(j,q,S,J,L,w){return a(),n("div",null,f)}const N=s(_,[["render",x]]);export{P as __pageData,N as default};
